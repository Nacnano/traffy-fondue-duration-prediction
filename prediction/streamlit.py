import streamlit as st
import pandas as pd
import requests
import pydeck as pdk
import numpy as np
import plotly.express as px
import datetime

from model import load_model
from predictor import predict_duration, DEVICE

st.set_page_config(page_title="Traffy Fondue Dashboard", layout="wide")

# Sidebar controls
st.sidebar.header("Filter Options")
top_n_types = st.sidebar.slider(
    "Number of Problem Types to Display", min_value=1, max_value=20, value=10
)
top_n_orgs = st.sidebar.slider(
    "Number of Organizations to Display", min_value=1, max_value=20, value=10
)

st.title("Traffy Fondue Dashboard")

# --------- Bar Chart ---------
st.header("Average Fix Duration by Problem Type")
st.markdown(
    """
**What does this chart show?**  
This bar chart displays the **average duration (in days)** it takes to resolve issues for each problem type.  
"""
)
bar_url = "https://njqqsrafv7.execute-api.us-east-1.amazonaws.com/development/duration/avg-by-problem-type"
bar_raw = requests.get(bar_url).json()
bar_data = pd.DataFrame(bar_raw["data"])

st.subheader("Bar Chart API Data")
st.write(bar_data)
# st.write("Columns:", bar_data.columns.tolist())

if "problem_type" in bar_data.columns and "duration_minutes" in bar_data.columns:
    bar_data = bar_data.dropna(subset=["problem_type"])
    bar_data["problem_type"] = bar_data["problem_type"].astype(str)
    bar_data["duration_days"] = (
        bar_data["duration_minutes"] / 1440
    )  # Convert minutes to days

    # st.write("Unique problem types:", bar_data["problem_type"].unique())

    # Sort and take top N
    bar_data = bar_data.sort_values("duration_days", ascending=False).head(top_n_types)

    # Plotly bar chart
    fig = px.bar(
        bar_data,
        x="problem_type",
        y="duration_days",
        text=bar_data["duration_days"].round(2),
        labels={
            "duration_days": "Average Duration (days)",
            "problem_type": "Problem Type",
        },
        title="Average Fix Duration by Problem Type",
    )
    fig.update_traces(textposition="outside")
    fig.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig, use_container_width=True)
else:
    st.warning(
        "Expected columns 'problem_type' and 'duration_minutes' not found in bar chart data."
    )

# --------- Box Plot (True Box Plot Implementation) ---------
st.header("Duration Distribution by Organization (Box Plot)")
st.markdown(
    """
**What does this chart show?**  
This **box plot** displays the distribution of fix durations (in days) for each organization.  
Outliers might be points of interest to investigate further.
"""
)
box_url = "https://njqqsrafv7.execute-api.us-east-1.amazonaws.com/development/duration/boxplot-by-org"
box_raw = requests.get(box_url).json()
box_data = pd.DataFrame(box_raw["data"])

st.subheader("Box Plot API Data")
st.write(box_data)
# st.write("Columns:", box_data.columns.tolist())

if "org" in box_data.columns and {
    "min_duration",
    "q1",
    "median",
    "q3",
    "max_duration",
}.issubset(box_data.columns):
    box_data = box_data.dropna(subset=["org"])
    box_data = box_data[box_data["org"].str.strip() != ""]  # Remove empty orgs
    box_data = box_data.sort_values("median", ascending=False).head(top_n_orgs)

    # Mock raw data from summary stats for visualization only
    expanded_rows = []
    for _, row in box_data.iterrows():
        org = row["org"]
        synthetic_data = (
            [row["min_duration"]] * 5
            + [row["q1"]] * 5
            + [row["median"]] * 5
            + [row["q3"]] * 5
            + [row["max_duration"]] * 5
        )
        for val in synthetic_data:
            expanded_rows.append({"org": org, "duration_minutes": val})

    mock_data = pd.DataFrame(expanded_rows)
    mock_data["duration_days"] = mock_data["duration_minutes"] / 1440

    # Plotly box plot
    fig = px.box(
        mock_data,
        x="org",
        y="duration_days",
        points="all",
        labels={"duration_days": "Duration (days)", "org": "Organization"},
        title="Duration Distribution by Organization",
    )
    fig.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig, use_container_width=True)
else:
    st.warning("Expected boxplot columns not found in box plot data.")

# --------- PyDeck Heatmap (Spatial) ---------
st.header("Spatial Heatmap: Average Duration by Location")
st.markdown(
    """
**What does this chart show?**  
This spatial heatmap shows where problems take longer to resolve, visualized on a map.  
Each hotspot represents a location, and its intensity reflects the **average duration (in days)**.  
"""
)
heatmap_url = "https://njqqsrafv7.execute-api.us-east-1.amazonaws.com/development/duration/avg-by-district"
heatmap_raw = requests.get(heatmap_url).json()
heatmap_data = pd.DataFrame(heatmap_raw["data"])

st.subheader("Heatmap API Data")
st.write(heatmap_data)
# st.write("Columns:", heatmap_data.columns.tolist())

if {"district", "problem_type", "avg_duration_minutes"}.issubset(heatmap_data.columns):
    # Add mock lat/lon if not present
    if "lat" not in heatmap_data.columns or "lon" not in heatmap_data.columns:
        np.random.seed(0)
        heatmap_data["lat"] = 13.7 + np.random.rand(len(heatmap_data)) * 0.2
        heatmap_data["lon"] = 100.4 + np.random.rand(len(heatmap_data)) * 0.2

    # Convert to days
    heatmap_data["avg_duration_days"] = heatmap_data["avg_duration_minutes"] / 1440

    st.write("Spatial Heatmap (PyDeck)")
    layer = pdk.Layer(
        "HeatmapLayer",
        data=heatmap_data,
        get_position="[lon, lat]",
        get_weight="avg_duration_days",
        radiusPixels=60,
    )

    view_state = pdk.ViewState(
        latitude=heatmap_data["lat"].mean(),
        longitude=heatmap_data["lon"].mean(),
        zoom=10,
        pitch=40,
    )

    st.pydeck_chart(pdk.Deck(layers=[layer], initial_view_state=view_state))

else:
    st.warning(
        "Expected columns 'district', 'problem_type', and 'avg_duration_minutes' not found in heatmap data."
    )

# --------- Prediction Section ---------
st.header("üìç Predict Resolution Time from Your Input")
st.markdown("‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤")


@st.cache_resource
def get_model():
    return load_model(
        model_path="best_model_state.bin",
        model_name="airesearch/wangchanberta-base-att-spm-uncased",
        num_org_features=11,
        device=DEVICE,
    )


model = get_model()

with st.form("prediction_form"):
    col1, col2 = st.columns(2)

    with col1:
        problem_type = st.selectbox(
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
            [
                "‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
                "‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á",
                "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏à‡∏£‡∏à‡∏±‡∏î",
                "‡∏™‡∏∞‡∏û‡∏≤‡∏ô",
                "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢",
                "‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞",
                "‡∏ñ‡∏ô‡∏ô",
                "‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡πâ‡∏≤",
                "‡∏™‡∏≤‡∏¢‡πÑ‡∏ü",
                "‡∏Ñ‡∏•‡∏≠‡∏á",
                "‡∏ó‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥",
                "‡∏à‡∏£‡∏≤‡∏à‡∏£",
                "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡∏ö‡∏Å‡∏ß‡∏ô",
                "‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á",
                "‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°",
                "‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ",
                "‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á",
                "‡∏Ñ‡∏ô‡∏à‡∏£‡∏à‡∏±‡∏î",
                "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î",
                "‡πÄ‡∏™‡∏µ‡∏¢‡∏á",
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á",
                "‡πÑ‡∏ü‡∏ü‡πâ‡∏≤",
                "‡∏à‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
                "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∏‡∏î",
                "‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏",
                "‡∏ú‡∏¥‡∏î‡∏Å‡∏é‡∏à‡∏£‡∏≤‡∏à‡∏£",
                "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ä‡∏≥‡∏£‡∏∏‡∏î",
                "‡∏Ñ‡∏ô‡πÄ‡∏£‡πà‡∏£‡πà‡∏≠‡∏ô",
                "‡∏ù‡∏∏‡πà‡∏ô‡∏Ñ‡∏ß‡∏±‡∏ô&‡∏Å‡∏•‡∏¥‡πà‡∏ô&PM2.5",
                "‡πÄ‡∏ú‡∏≤‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏•‡πà‡∏á",
                "‡∏´‡∏≤‡∏ö‡πÄ‡∏£‡πà‡πÅ‡∏ú‡∏á‡∏•‡∏≠‡∏¢",
                "‡∏™‡∏±‡∏ï‡∏ß‡πå",
                "‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
                "‡∏õ‡πâ‡∏≤‡∏¢‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤",
                "‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô&‡∏™‡∏≥‡∏£‡∏ß‡∏à",
                "‡∏õ‡∏£‡∏∞‡∏õ‡∏≤",
                "‡∏ó‡∏∏‡∏à‡∏£‡∏¥‡∏ï",
                "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™",
                "‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
                "‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£",
                "‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
                "‡πÅ‡∏ó‡πá‡∏Å‡∏ã‡∏µ‡πà/‡∏£‡∏ñ‡πÄ‡∏°‡∏•‡πå",
                "‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏°",
            ],
        )

        comment = st.text_area("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤", "‡∏°‡∏µ‡∏Ç‡∏¢‡∏∞‡∏™‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÄ‡∏´‡∏°‡πá‡∏ô")
        organization = st.selectbox(
            "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á",
            [
                "Bangkok Smart Lighting (‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏¢‡∏ò‡∏≤ ‡∏Å‡∏ó‡∏°.)",
                "MRTA",
                "Traffy @ ITS Lab2",
                "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ 2 ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ 2 ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ (‡∏™‡∏Ñ‡∏≠.‡∏™‡∏ô‡∏¢.)",
                "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏á ‡∏™‡∏Ç‡∏£.‡∏™‡∏Ç‡∏™.‡∏™‡∏à‡∏™. ‡∏Å‡∏ó‡∏°.",
                "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏ó‡∏≤‡∏á‡∏ö‡∏Å‡πÅ‡∏•‡∏∞‡∏ó‡∏≤‡∏á‡∏ô‡πâ‡∏≥ ‡∏™‡∏ö‡∏ô.‡∏™‡∏Ç‡∏™.‡∏™‡∏à‡∏™. ‡∏Å‡∏ó‡∏°.",
                "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö 1 ‡∏™‡∏ß‡∏à.‡∏™‡∏à‡∏™. ‡∏Å‡∏ó‡∏°.",
                "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏á ‡∏™‡∏Ç‡∏™.‡∏™‡∏à‡∏™. ‡∏Å‡∏ó‡∏°.",
                "‡∏ó‡∏®‡∏ó",
                "‡∏ü‡∏Ç‡∏Ç.‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ü‡∏∏‡∏ï‡∏ö‡∏≤‡∏ó+‡∏ù‡∏≤‡∏ó‡πà‡∏≠",
                "‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡∏≤‡∏¢‡∏™‡∏µ‡πÅ‡∏î‡∏á ‡∏£‡∏ü‡∏ó.",
                "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏°‡∏π‡∏•‡∏ù‡∏≠‡∏¢‡∏™‡∏≤‡∏¢‡πÑ‡∏´‡∏° ‡∏Å‡∏Å‡∏ù. ‡∏™‡∏™‡∏•.",
                "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡πÄ‡∏ó‡∏≤‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏†‡∏±‡∏¢ ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
                "‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°",
                "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ 1 ‡∏™‡∏™‡∏ì. ‡∏™‡∏™‡∏•.",
                "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ 2 ‡∏™‡∏™‡∏ì. ‡∏™‡∏™‡∏•.",
                "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏ô‡∏ô‡∏ß‡∏¥‡∏ó‡∏¢‡∏∏",
                "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏ô‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ñ‡∏ô‡∏ô‡∏™‡∏≤‡∏£‡∏™‡∏¥‡∏ô",
                "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡∏≤‡∏¢‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ (‡∏ñ‡∏ô‡∏ô‡∏û‡∏´‡∏•‡πÇ‡∏¢‡∏ò‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏ñ‡∏ô‡∏ô‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß)",
                "‡πÇ‡∏¢‡∏ò‡∏≤‡∏ò‡∏¥‡∏Å‡∏≤‡∏£",
                "Other",
            ],
        )

    with col2:
        timestamp = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á", value=datetime.date.today())
        area = st.selectbox(
            "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà",
            [
                "‡∏Ñ‡∏•‡∏≠‡∏á‡∏™‡∏≤‡∏ô",
                "‡∏Ñ‡∏•‡∏≠‡∏á‡∏™‡∏≤‡∏°‡∏ß‡∏≤",
                "‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢",
                "‡∏Ñ‡∏±‡∏ô‡∏ô‡∏≤‡∏¢‡∏≤‡∏ß",
                "‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£",
                "‡∏à‡∏≠‡∏°‡∏ó‡∏≠‡∏á",
                "‡∏î‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á",
                "‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á",
                "‡∏î‡∏∏‡∏™‡∏¥‡∏ï",
                "‡∏ï‡∏•‡∏¥‡πà‡∏á‡∏ä‡∏±‡∏ô",
                "‡∏ó‡∏ß‡∏µ‡∏ß‡∏±‡∏í‡∏ô‡∏≤",
                "‡∏ó‡∏∏‡πà‡∏á‡∏Ñ‡∏£‡∏∏",
                "‡∏ò‡∏ô‡∏ö‡∏∏‡∏£‡∏µ",
                "‡∏ò‡∏±‡∏ç‡∏ö‡∏∏‡∏£‡∏µ",
                "‡∏ö‡∏≤‡∏á‡∏Å‡∏≠‡∏Å‡∏ô‡πâ‡∏≠‡∏¢",
                "‡∏ö‡∏≤‡∏á‡∏Å‡∏≠‡∏Å‡πÉ‡∏´‡∏ç‡πà",
                "‡∏ö‡∏≤‡∏á‡∏Å‡∏∞‡∏õ‡∏¥",
                "‡∏ö‡∏≤‡∏á‡∏Ç‡∏∏‡∏ô‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô",
                "‡∏ö‡∏≤‡∏á‡∏Ñ‡∏≠‡πÅ‡∏´‡∏•‡∏°",
                "‡∏ö‡∏≤‡∏á‡∏ã‡∏∑‡πà‡∏≠",
                "‡∏ö‡∏≤‡∏á‡∏ô‡∏≤",
                "‡∏ö‡∏≤‡∏á‡∏ö‡∏≠‡∏ô",
                "‡∏ö‡∏≤‡∏á‡∏û‡∏•‡∏±‡∏î",
                "‡∏ö‡∏≤‡∏á‡∏û‡∏•‡∏µ",
                "‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å",
                "‡∏ö‡∏≤‡∏á‡πÄ‡∏Ç‡∏ô",
                "‡∏ö‡∏≤‡∏á‡πÅ‡∏Ñ",
                "‡∏ö‡∏∂‡∏á‡∏Å‡∏∏‡πà‡∏°",
                "‡∏õ‡∏ó‡∏∏‡∏°‡∏ß‡∏±‡∏ô",
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏ß‡∏®",
                "‡∏õ‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏≤‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡πà‡∏≤‡∏¢",
                "‡∏û‡∏ç‡∏≤‡πÑ‡∏ó",
                "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£",
                "‡∏û‡∏£‡∏∞‡πÇ‡∏Ç‡∏ô‡∏á",
                "‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏à‡∏£‡∏¥‡∏ç",
                "‡∏°‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ",
                "‡∏¢‡∏≤‡∏ô‡∏ô‡∏≤‡∏ß‡∏≤",
                "‡∏£‡∏≤‡∏ä‡πÄ‡∏ó‡∏ß‡∏µ",
                "‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ö‡∏π‡∏£‡∏ì‡∏∞",
                "‡∏•‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏±‡∏á",
                "‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß",
                "‡∏ß‡∏±‡∏á‡∏ó‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏á",
                "‡∏ß‡∏±‡∏í‡∏ô‡∏≤",
                "‡∏™‡∏ß‡∏ô‡∏´‡∏•‡∏ß‡∏á",
                "‡∏™‡∏∞‡∏û‡∏≤‡∏ô‡∏™‡∏π‡∏á",
                "‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡∏ß‡∏á‡∏®‡πå",
                "‡∏™‡∏≤‡∏ó‡∏£",
                "‡∏™‡∏≤‡∏¢‡πÑ‡∏´‡∏°",
                "‡∏´‡∏ô‡∏≠‡∏á‡∏à‡∏≠‡∏Å",
                "‡∏´‡∏ô‡∏≠‡∏á‡πÅ‡∏Ç‡∏°",
                "‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏µ‡πà",
                "‡∏´‡πâ‡∏ß‡∏¢‡∏Ç‡∏ß‡∏≤‡∏á",
                "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ",
                "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£",
            ],
        )

    submitted = st.form_submit_button("üîç Predict")

    if submitted:
        try:
            pred_days = predict_duration(
                model=model,
                text=problem_type + " " + comment,
                org=organization,
                comment=comment,
                type_=problem_type,
                timestamp=timestamp,
            )

            st.success(
                f"‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ **{pred_days:.2f} ‡∏ß‡∏±‡∏ô** ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ"
            )
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå: {e}")

# # --------- List of All Problem Types ---------
# st.subheader("üìã All Problem Types in Dataset")
# if not bar_data.empty and "problem_type" in bar_data.columns:
#     all_problem_types = bar_data["problem_type"].dropna().unique()
#     st.markdown(f"Total problem types: **{len(all_problem_types)}**")
#     for ptype in sorted(all_problem_types):
#         st.markdown(f"- {ptype}")

# # --------- List of All Organizations ---------
# st.subheader("üè¢ All Organizations in Dataset")
# if not box_data.empty and "org" in box_data.columns:
#     all_orgs = box_data["org"].dropna().unique()
#     st.markdown(f"Total organizations: **{len(all_orgs)}**")
#     for org in sorted(all_orgs):
#         st.markdown(f"- {org}")

# # --------- List of All Districts ---------
# st.subheader("üìç All Districts in Dataset")
# if not heatmap_data.empty and "district" in heatmap_data.columns:
#     all_districts = heatmap_data["district"].dropna().unique()
#     st.markdown(f"Total districts: **{len(all_districts)}**")
#     for district in sorted(all_districts):
#         st.markdown(f"- {district}")